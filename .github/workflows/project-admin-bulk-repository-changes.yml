name: Bulk Repository Changes

permissions:
  contents: write       # For CODEOWNERS file operations
  pull-requests: write  # For creating pull requests

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - 'disable-wiki'
          - 'add-changelog-codeowners'
        default: 'disable-wiki'
      
      dry_run:
        description: 'Run in dry-run mode (no actual changes)'
        required: true
        type: boolean
        default: true
      
      # Repository Category Selection
      include_sandbox_repos:
        description: 'Include Sandbox API Repositories'
        required: false
        type: boolean
        default: true
      
      include_incubating_repos:
        description: 'Include Incubating API Repositories'
        required: false
        type: boolean
        default: true
      
      include_working_group_repos:
        description: 'Include Working Group Repositories'
        required: false
        type: boolean
        default: true
      
      include_other_repos:
        description: 'Include Other Repositories'
        required: false
        type: boolean
        default: true
      
      repository_filter:
        description: 'Repository name pattern (leave empty for all repos)'
        required: false
        type: string
        default: ''
      
      exclude_repos:
        description: 'Comma-separated list of repos to exclude'
        required: false
        type: string
        default: 'Governance,.github'
      
      commit_strategy:
        description: 'How to apply CODEOWNERS changes'
        required: false
        type: choice
        options:
          - 'pull-request'
          - 'direct-with-warning'
        default: 'pull-request'

jobs:
  get-repositories:
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.get-repos.outputs.repositories }}
      total_count: ${{ steps.get-repos.outputs.total_count }}
    steps:
      - name: Get organization repositories
        id: get-repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';  // Hardcoded for CAMARA project
            const filterPattern = '${{ github.event.inputs.repository_filter }}';
            const excludeRepos = '${{ github.event.inputs.exclude_repos }}'.split(',').map(r => r.trim()).filter(r => r);
            
            // Category selection inputs
            const includeSandbox = ${{ fromJson(github.event.inputs.include_sandbox_repos) }};
            const includeIncubating = ${{ fromJson(github.event.inputs.include_incubating_repos) }};
            const includeWorkingGroup = ${{ fromJson(github.event.inputs.include_working_group_repos) }};
            const includeOther = ${{ fromJson(github.event.inputs.include_other_repos) }};
            
            console.log(`Getting repositories for organization: ${org}`);
            console.log(`Filter pattern: ${filterPattern}`);
            console.log(`Exclude repos: ${excludeRepos}`);
            console.log(`Include categories:`);
            console.log(`  - Sandbox API Repositories: ${includeSandbox}`);
            console.log(`  - Incubating API Repositories: ${includeIncubating}`);
            console.log(`  - Working Group Repositories: ${includeWorkingGroup}`);
            console.log(`  - Other Repositories: ${includeOther}`);
            
            let allRepos = [];
            let page = 1;
            
            while (true) {
              const response = await github.rest.repos.listForOrg({
                org: org,
                type: 'all',
                sort: 'name',
                per_page: 100,
                page: page
              });
              
              if (response.data.length === 0) break;
              allRepos = allRepos.concat(response.data);
              page++;
            }
            
            // Function to categorize repository based on topics
            function categorizeRepository(topics) {
              if (topics.includes('sandbox-api-repository')) {
                return 'sandbox';
              } else if (topics.includes('incubating-api-repository')) {
                return 'incubating';
              } else if (topics.includes('workinggroup')) {
                return 'working-group';
              } else {
                return 'other';
              }
            }
            
            // Filter repositories based on criteria and categories
            let filteredRepos = [];
            let categoryCounts = { sandbox: 0, incubating: 0, 'working-group': 0, other: 0 };
            
            for (const repo of allRepos) {
              // Skip archived repositories
              if (repo.archived) continue;
              
              // Skip excluded repositories  
              if (excludeRepos.includes(repo.name)) continue;
              
              // Apply name filter pattern if provided
              if (filterPattern && !repo.name.includes(filterPattern)) continue;
              
              // Categorize repository based on topics
              const category = categorizeRepository(repo.topics || []);
              categoryCounts[category]++;
              
              // Check if this category is selected for inclusion
              let includeThisRepo = false;
              switch (category) {
                case 'sandbox':
                  includeThisRepo = includeSandbox;
                  break;
                case 'incubating':
                  includeThisRepo = includeIncubating;
                  break;
                case 'working-group':
                  includeThisRepo = includeWorkingGroup;
                  break;
                case 'other':
                  includeThisRepo = includeOther;
                  break;
              }
              
              if (includeThisRepo) {
                filteredRepos.push(repo);
              }
            }
            
            const repositories = filteredRepos.map(repo => ({
              name: repo.name,
              full_name: repo.full_name,
              default_branch: repo.default_branch,
              category: categorizeRepository(repo.topics || [])
            }));
            
            console.log(`\nRepository counts by category:`);
            console.log(`  - Sandbox API Repositories: ${categoryCounts.sandbox}`);
            console.log(`  - Incubating API Repositories: ${categoryCounts.incubating}`);
            console.log(`  - Working Group Repositories: ${categoryCounts['working-group']}`);
            console.log(`  - Other Repositories: ${categoryCounts.other}`);
            console.log(`\nSelected ${repositories.length} repositories for processing`);
            
            core.setOutput('repositories', JSON.stringify(repositories));
            core.setOutput('total_count', repositories.length);

  execute-changes:
    needs: get-repositories
    if: fromJson(needs.get-repositories.outputs.total_count) > 0
    strategy:
      matrix:
        repository: ${{ fromJson(needs.get-repositories.outputs.repositories) }}
      max-parallel: 5
      fail-fast: false
    uses: ./.github/workflows/project-admin-repository-worker.yml
    with:
      repository_name: ${{ matrix.repository.name }}
      repository_full_name: ${{ matrix.repository.full_name }}
      default_branch: ${{ matrix.repository.default_branch }}
      operation: ${{ github.event.inputs.operation }}
      dry_run: ${{ fromJson(github.event.inputs.dry_run) }}
      commit_strategy: ${{ github.event.inputs.commit_strategy }}
    secrets:
      CAMARA_TOKEN: ${{ secrets.CAMARA_TOKEN }}

  execute-changes:
    needs: get-repositories
    if: fromJson(needs.get-repositories.outputs.total_count) > 0
    strategy:
      matrix:
        repository: ${{ fromJson(needs.get-repositories.outputs.repositories) }}
      max-parallel: 5
      fail-fast: false
    uses: ./.github/workflows/project-admin-repository-worker.yml
    with:
      repository_name: ${{ matrix.repository.name }}
      repository_full_name: ${{ matrix.repository.full_name }}
      default_branch: ${{ matrix.repository.default_branch }}
      operation: ${{ github.event.inputs.operation }}
      dry_run: ${{ fromJson(github.event.inputs.dry_run) }}
      commit_strategy: ${{ github.event.inputs.commit_strategy }}
    secrets:
      CAMARA_TOKEN: ${{ secrets.CAMARA_TOKEN }}

  collect-results:
    needs: [get-repositories, execute-changes]
    if: always() && fromJson(needs.get-repositories.outputs.total_count) > 0
    runs-on: ubuntu-latest
    steps:
      - name: Collect and summarize results
        uses: actions/github-script@v7
        with:
          script: |
            const repositories = JSON.parse('${{ needs.get-repositories.outputs.repositories }}');
            const operation = '${{ github.event.inputs.operation }}';
            const dryRun = ${{ fromJson(github.event.inputs.dry_run) }};
            const commitStrategy = '${{ github.event.inputs.commit_strategy }}' || 'N/A';
            
            console.log('Collecting results from matrix jobs...');
            
            // Get all jobs from this workflow run
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            console.log(`Found ${jobs.data.jobs.length} jobs`);
            
            // Find execute-changes jobs (matrix jobs)
            const matrixJobs = jobs.data.jobs.filter(job => 
              job.name.includes('execute-changes') && 
              job.name.includes('(')  // Matrix jobs have (repository.name) in the name
            );
            
            console.log(`Found ${matrixJobs.length} matrix jobs`);
            
            // Create results summary
            let results = [];
            let statusCounts = {
              'success': 0,
              'failure': 0,
              'cancelled': 0,
              'skipped': 0
            };
            
            for (const repo of repositories) {
              // Find the corresponding matrix job
              const matrixJob = matrixJobs.find(job => 
                job.name.includes(`(${repo.name})`) || job.name.includes(repo.name)
              );
              
              let status = 'unknown';
              let conclusion = 'unknown';
              let details = '';
              
              if (matrixJob) {
                status = matrixJob.status;
                conclusion = matrixJob.conclusion || 'in_progress';
                
                // Count conclusions
                if (statusCounts[conclusion] !== undefined) {
                  statusCounts[conclusion]++;
                } else {
                  statusCounts[conclusion] = 1;
                }
                
                // Determine details based on conclusion
                switch (conclusion) {
                  case 'success':
                    details = dryRun ? 'Dry run completed' : 'Operation completed successfully';
                    break;
                  case 'failure':
                    details = 'Operation failed - check job logs';
                    break;
                  case 'cancelled':
                    details = 'Operation was cancelled';
                    break;
                  case 'skipped':
                    details = 'Operation was skipped';
                    break;
                  default:
                    details = `Status: ${conclusion}`;
                }
              }
              
              results.push({
                repository: repo.name,
                category: repo.category || 'other',
                status: conclusion,
                details: details,
                job_url: matrixJob ? matrixJob.html_url : 'N/A'
              });
            }
            
            // Generate execution summary
            const timestamp = new Date().toISOString();
            const totalRepos = repositories.length;
            
            // Create markdown report
            let markdownReport = `# CAMARA Bulk Repository Changes - Execution Report
            
            **Execution Time:** ${timestamp}
            **Operation:** ${operation}
            **Commit Strategy:** ${commitStrategy}
            **Mode:** ${dryRun ? 'DRY RUN' : 'LIVE EXECUTION'}
            **Total Repositories:** ${totalRepos}
            
            ## Summary Statistics
            
            | Status | Count | Percentage |
            |--------|-------|------------|`;
            
            for (const [status, count] of Object.entries(statusCounts)) {
              const percentage = totalRepos > 0 ? ((count / totalRepos) * 100).toFixed(1) : '0.0';
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : status === 'cancelled' ? '⏹️' : '⏭️';
              markdownReport += `\n| ${emoji} ${status} | ${count} | ${percentage}% |`;
            }
            
            markdownReport += `
            
            ## Repository Results
            
            | Repository | Category | Status | Details |
            |------------|----------|--------|---------|`;
            
            // Sort results by status (failures first, then success)
            results.sort((a, b) => {
              if (a.status === 'failure' && b.status !== 'failure') return -1;
              if (a.status !== 'failure' && b.status === 'failure') return 1;
              return a.repository.localeCompare(b.repository);
            });
            
            for (const result of results) {
              const emoji = result.status === 'success' ? '✅' : 
                           result.status === 'failure' ? '❌' : 
                           result.status === 'cancelled' ? '⏹️' : '⏭️';
              markdownReport += `\n| ${result.repository} | ${result.category} | ${emoji} ${result.status} | ${result.details} |`;
            }
            
            markdownReport += `
            
            ## Next Steps
            
            ${dryRun ? `
            ### After Dry Run Review:
            - Review the results above to understand which repositories will be affected
            - Check any failed operations and resolve issues
            - Run the same operation with dry_run disabled for live execution
            ` : `
            ### After Live Execution:
            - ✅ **Successful operations**: Changes have been applied
            - ❌ **Failed operations**: Review job logs and resolve issues manually
            - 🔄 **Re-run capability**: Failed repositories can be targeted specifically for retry
            `}
            
            ---
            *Generated by CAMARA project-admin bulk workflow*
            `;
            
            // Also create CSV data
            let csvData = 'Repository,Category,Status,Details,Job URL\n';
            for (const result of results) {
              csvData += `"${result.repository}","${result.category}","${result.status}","${result.details}","${result.job_url}"\n`;
            }
            
            // Write files using Node.js fs
            const fs = require('fs');
            
            // Create results directory
            if (!fs.existsSync('results')) {
              fs.mkdirSync('results');
            }
            
            // Write markdown report
            fs.writeFileSync('results/bulk-changes-report.md', markdownReport);
            console.log('✅ Created markdown report');
            
            // Write CSV data
            fs.writeFileSync('results/bulk-changes-results.csv', csvData);
            console.log('✅ Created CSV results');
            
            // Write JSON data for programmatic access
            const jsonReport = {
              metadata: {
                timestamp: timestamp,
                operation: operation,
                commit_strategy: commitStrategy,
                dry_run: dryRun,
                total_repositories: totalRepos
              },
              summary: statusCounts,
              results: results
            };
            
            fs.writeFileSync('results/bulk-changes-data.json', JSON.stringify(jsonReport, null, 2));
            console.log('✅ Created JSON data');
            
            // Add summary to job summary
            core.summary.addRaw(markdownReport);
            await core.summary.write();
            
            console.log(`📊 Results summary completed - processed ${totalRepos} repositories`);

      - name: Upload results artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bulk-changes-results-${{ github.run_number }}
          path: results/
          retention-days: 30

  summary:
    needs: [get-repositories, execute-changes, collect-results]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Final summary
        uses: actions/github-script@v7
        with:
          script: |
            const totalRepos = ${{ needs.get-repositories.outputs.total_count }};
            const operation = '${{ github.event.inputs.operation }}';
            const dryRun = ${{ fromJson(github.event.inputs.dry_run) }};
            const executionResult = '${{ needs.execute-changes.result }}';
            const collectionResult = '${{ needs.collect-results.result }}';
            
            let summary = `## Bulk Repository Changes Summary\n\n`;
            summary += `**Operation**: ${operation}\n`;
            summary += `**Mode**: ${dryRun ? 'DRY RUN' : 'LIVE'}\n`;
            summary += `**Total Repositories**: ${totalRepos}\n`;
            summary += `**Execution Status**: ${executionResult}\n`;
            summary += `**Results Collection**: ${collectionResult}\n\n`;
            
            if (totalRepos === 0) {
              summary += `⚠️ No repositories matched the selection criteria.\n\n`;
              summary += `**Check your filters:**\n`;
              summary += `- Repository categories selected\n`;
              summary += `- Repository name filters\n`;
              summary += `- Excluded repositories list\n`;
            } else {
              summary += `📊 **Detailed results available in:**\n`;
              summary += `- Job summary above (markdown report)\n`;
              summary += `- Downloadable artifacts (CSV, JSON, markdown files)\n\n`;
              
              if (dryRun) {
                summary += `🧪 **This was a dry run** - no actual changes were made.\n`;
                summary += `Review the detailed results and run with dry_run=false for live execution.\n`;
              } else {
                summary += `✅ **Live execution completed**.\n`;
                summary += `Check the detailed results for individual repository outcomes.\n`;
              }
            }
            
            console.log(summary);
            core.summary.addRaw(summary);
            await core.summary.write();